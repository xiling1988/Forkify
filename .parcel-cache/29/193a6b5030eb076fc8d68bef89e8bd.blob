var _modelJs = require('./model.js');
var _viewsRecipeViewJs = require('./views/recipeView.js');
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
var _viewsRecipeViewJsDefault = _parcelHelpers.interopDefault(_viewsRecipeViewJs);
require('core-js/stable');
require('regenerator-runtime/runtime');
// import recipeView from './views/recipeView.js';
const recipeContainer = document.querySelector('.recipe');
const timeout = function (s) {
  return new Promise(function (_, reject) {
    setTimeout(function () {
      reject(new Error(`Request took too long! Timeout after ${s} second`));
    }, s * 1000);
  });
};
// https://forkify-api.herokuapp.com/v2
// /////////////////////////////////////
const controlRecipes = async function () {
  try {
    const id = window.location.hash.slice(1);
    // console.log(id);
    if (!id) return;
    // guard clause
    _viewsRecipeViewJsDefault.default.renderSpinner();
    // loading recipe
    await _modelJs.loadRecipe(id);
    // 2. Rendering recipe
    _viewsRecipeViewJsDefault.default.render(_modelJs.state.recipe);
  } catch (err) {
    alert(err);
  }
};
// controlRecipes();
// window.addEventListener('hashchange', controlRecipes); //Callback functions without the calling parenthesis!!!
// window.addEventListener('load', controlRecipes); //Callback functions without the calling parenthesis!!!
// in order not to have to make eventlisteners for every event that has the same callback function(hashchange, load, ect...) we can put all events into an array and loop over it with the eventlistener method:
['hashchange', 'load'].forEach(ev => window.addEventListener(ev, controlRecipes));
